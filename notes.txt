// Pratical Design Patterns in Javascript By Jonathan Mills

//////////////////////// Types of Patterns ////////////////////////
/*
Creational                    Structural                Behaviour
(1) Constructor               (1) Decorator             (1) Command
(2) Module                    (2) Facade                (2) Mediator
(3) Factory                   (3) Flyweight             (3) Observer
(4) Singleton
*/


////////////////////////////////////////////////////////////////////

// Creating a new Object 
// (1) Just use the curly braces
// var obj = {};

// (2) Using Object.create
// var nextObj = Object.create(Object.prototype); 

// (3) Use the new keyword
// var lastObj = new Object(); 

////////////////////////////////////////////////////////////////////

// Assigning Keys and Values 

// (1) Dot Notation 
/*
var obj = {};
obj.param = 'New Value'; 
display(obj.param); 
*/
// (2) Square Bracket Notation 
/*
var obj = {};
obj['param'] = 'New Value'; 
display(obj['param']); 
display(obj.param);
// Dot Notation and Bracket Notation can use interchangable
*/

// one advantage of bracket notation 
// bracket notation with variables 
/*
var obj = {};
var val = 'value'; 
obj[val] = 'New Value';
display(obj[val]);
*/

Defining Properties 
ECMAScript 5 introduces defineProperty

Object.defineProperty(obj, 'name', {
	value:'My Value', 
	writable : true,
	enumerable : true,
	configurable : true
})

////////////////////////////////////////////////////////////////////

Creational Design Patterns
Used to construct new Objects
Adapting creation to the situation

//////////////////////// (1) Constructor Patten ////////////////////////

// Use to create new objects with their own object scope
// The new keyword 
	(1) Creates a brand new object 
	(2) Links to an object prototype
	(3) Binds 'this' to the new object scope
	(4) Implicity returns this
	

// Constructor Pattern
// Create objects from functions

function ObjectName(param1, param2){
	this.param1 = param1;
	this.param2 = param2;
	this.toString = function(){
		return this.param1 + ' ' + this.param2;
	}
}

// Constructor Pattern 
// Drawbacks 

// the toString function is recreated for all objects 
// if we create 4 objects, toString function is re-created all 4 times. 
// it is unefficient 

We have Prototype concept 
An encapsulation of properties that an object links to 

////////////////////////////////////////////////////////////////////


//////////////////////// Transpile ////////////////////////

You can export Car class, transpile and require:

// module js-models/lib/Car
"use strict";

export class Car {
    constructor(color) {
        this.color = color;
    }
}

// node project
var Car = require("js-models/lib/Car").Car;    
var blueCar = new Car('blue');

////////////////////////////////////////////////////////////////////


//////////////////////// Angular Environment ////////////////////////

plnkr.co/edit/LQepAH?p=preview

////////////////////////////////////////////////////////////////////


//////////////////////// (1) Module Patten ////////////////////////
Simple Way to Encapsulate Methods
Creates a 'Toolbox' of functions to use

Module Pattern 
Object Literal 

var Module = {
	method: function(){...}, 
	nextMethod: fucntion(){...}
}


Module Patten 
Wrap it in a function 

var Module = function(){
	var privateVar = 'I am private...' ;
	return {
		method: function(){
		...
		}, 
		nextMethod: function(){
		...
		}
	}
}








